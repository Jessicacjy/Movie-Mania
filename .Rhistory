HealthData$Tent[HealthData$Tent == "437 - HUB 7"] <- "HUB # 7"
##
HealthData$Tent[HealthData$Tent == "Aid Station 1"] <- "Aid Station # 1"
HealthData$Tent[HealthData$Tent == "Aid Station 2"] <- "Aid Station # 2"
HealthData$Tent[HealthData$Tent == "Aid Station 3"] <- "Aid Station # 3"
HealthData$Tent[HealthData$Tent == "Aid Station 4"] <- "Aid Station # 4"
HealthData$Tent[HealthData$Tent == "Aid Station 5"] <- "Aid Station # 5"
HealthData$Tent[HealthData$Tent == "Aid Station 6"] <- "Aid Station # 6"
HealthData$Tent[HealthData$Tent == "Aid Station 7"] <- "Aid Station # 7"
HealthData$Tent[HealthData$Tent == "Aid Station 8"] <- "Aid Station # 8"
HealthData$Tent[HealthData$Tent == "Aid Station 9"] <- "Aid Station # 9"
HealthData$Tent[HealthData$Tent == "Aid Station 10"] <- "Aid Station # 10"
HealthData$Tent[HealthData$Tent == "Aid Station 11"] <- "Aid Station # 11"
HealthData$Tent[HealthData$Tent == "Aid Station 12"] <- "Aid Station # 12"
HealthData$Tent[HealthData$Tent == "Aid Station 13"] <- "Aid Station # 13"
HealthData$Tent[HealthData$Tent == "Aid Station 14"] <- "Aid Station # 14"
HealthData$Tent[HealthData$Tent == "Aid Station 15"] <- "Aid Station # 15"
HealthData$Tent[HealthData$Tent == "Aid Station 16"] <- "Aid Station # 16"
HealthData$Tent[HealthData$Tent == "Aid Station 17"] <- "Aid Station # 17"
HealthData$Tent[HealthData$Tent == "Aid Station 18"] <- "Aid Station # 18"
HealthData$Tent[HealthData$Tent == "Aid Station 19"] <- "Aid Station # 19"
HealthData$Tent[HealthData$Tent == "Aid Station 20"] <- "Aid Station # 20"
## fixing ems
ems_indices <- grep("EMS ", HealthData$Tent)
HealthData$Tent[ems_indices] <- gsub("EMS ", "EMS # ", HealthData$Tent[ems_indices])
##
HealthData$Tent[HealthData$Tent == "Medical Laflin"] <- "Medical - Laflin Tent"
## Indiana aid station is aid station #21
HealthData$Tent[HealthData$Tent == "Medical Indiana"] <- 'Aid Station # 21'
##
HealthData$Tent[HealthData$Tent == "Medical Jackson Tent"] <- "Medical - Jackson Tent"
##
HealthData$Tent[HealthData$Tent == "Medical Balbo - Gen Care"] <- "Medical - Balbo Tent"
HealthData$Tent[HealthData$Tent == "Medical Balbo - ICU"] <- "Medical - Balbo Tent"
HealthData$Tent[HealthData$Tent == "Medical Balbo - Urgent Care"] <- "Medical - Balbo Tent"
HealthData$Tent[HealthData$Tent == "Medical Balbo Podiatry Tent"] <- "Medical - Balbo Tent"
# convert back to factor
HealthData$Tent <- as.factor(HealthData$Tent)
# convert section to string for maniuplation and convert tent just in case
HealthData$Section <- as.character(HealthData$Section)
HealthData$Tent <- as.character(HealthData$Tent)
# POD-A, POD-B, POD-C, and POD-D in Tent = Medical - Balbo Tent need to be in the Podiatry Tent
HealthData$Tent[HealthData$Tent == 'Medical - Balbo Tent' & HealthData$Section == 'POD-A'] <- "Medical - Podiatry Tent"
HealthData$Tent[HealthData$Tent == 'Medical - Balbo Tent' & HealthData$Section == 'POD-B'] <- "Medical - Podiatry Tent"
HealthData$Tent[HealthData$Tent == 'Medical - Balbo Tent' & HealthData$Section == 'POD-C'] <- "Medical - Podiatry Tent"
HealthData$Tent[HealthData$Tent == 'Medical - Balbo Tent' & HealthData$Section == 'POD-D'] <- "Medical - Podiatry Tent"
#
HealthData$Section[HealthData$Section == 'Gen Care A - Hawks'] <- 'GC - A'
HealthData$Section[HealthData$Section == 'Gen Care B - Fire'] <- 'GC - B'
HealthData$Section[HealthData$Section == 'Gen Care C - Cubs'] <- 'GC - C'
HealthData$Section[HealthData$Section == 'Gen Care D - Sox'] <- 'GC - D'
HealthData$Section[HealthData$Section == 'Gen Care E - Bulls'] <- 'GC - E'
HealthData$Section[HealthData$Section == 'Gen Care F - Bears'] <- 'GC - F'
#
HealthData$Section[HealthData$Section == 'ICU-A'] <- 'ICU'
HealthData$Section[HealthData$Section == 'ICU-B'] <- 'ICU'
# putting spaces around the - in pod
pod_indices <- grep("POD-", HealthData$Section)
HealthData$Section[pod_indices] <- gsub("POD-", "POD - ", HealthData$Section[pod_indices])
# putting spaces between the - in GC-
gc_indices <- grep("GC-", HealthData$Section)
HealthData$Section[gc_indices] <- gsub("GC-", "GC - ", HealthData$Section[gc_indices])
# fixing EMS in sections
ems_sections_indices <- grep("EMS ", HealthData$Section)
HealthData$Section[ems_sections_indices] <- gsub("EMS ", "EMS # ", HealthData$Section[ems_sections_indices])
# convert section and tent back to factor
HealthData$Section <- as.factor(HealthData$Section)
HealthData$Tent <- as.factor(HealthData$Tent)
# convert to string for data manipulation
HealthData$ChiefComplaints <- as.character(HealthData$ChiefComplaints)
# strip leading and trailing white space, make all lower case
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
HealthData$ChiefComplaints <- trim(HealthData$ChiefComplaints)
HealthData$ChiefComplaints <- tolower(HealthData$ChiefComplaints)
# remove semicolon to get rid of trailing semicolon, then replace "  " with "; "
HealthData$ChiefComplaints <- gsub(";", "", HealthData$ChiefComplaints)
HealthData$ChiefComplaints <- gsub("  ", "; ", HealthData$ChiefComplaints)
# Recode nulls to NA
missing_complaints <- which(HealthData$ChiefComplaints == '')
HealthData$ChiefComplaints[missing_complaints] <- NA
# order text entries in alphabetical order (so we end up with the same categories)
order_string_splits <- function(dataframe_column, delimiter) {
store <- matrix(0,0,1)
split <- strsplit(dataframe_column, delimiter)
for (i in split) {
sorted <- sort(i)
concatenated <- paste(sorted, collapse='; ')
store <- rbind(store, concatenated)
}
return(store)
}
reordered_chief_complaints <- order_string_splits(HealthData$ChiefComplaints, '; ')
HealthData$ChiefComplaints <- as.factor(reordered_chief_complaints)
length(unique(HealthData$ChiefComplaints)) # 129 unique combinations after ordering
# convert Diagnosis to string for manipulation and make lower case
HealthData$Diagnosis <- as.character(HealthData$Diagnosis)
HealthData$Diagnosis <- tolower(HealthData$Diagnosis)
# do some reformating
HealthData$Diagnosis <- gsub('; ', '', HealthData$Diagnosis)
HealthData$Diagnosis <- gsub(' / ', '/', HealthData$Diagnosis)
HealthData$Diagnosis <- gsub(' ', '; ', HealthData$Diagnosis)
HealthData$Diagnosis <- gsub('muscle; cramps', 'muscle cramps', HealthData$Diagnosis)
HealthData$Diagnosis <- gsub('exercise; assoc.; collapse', 'exercise assoc. collapse', HealthData$Diagnosis)
HealthData$Diagnosis <- gsub('heel; pain', 'heel pain', HealthData$Diagnosis)
HealthData$Diagnosis <- gsub('shin; splints', 'shin splints', HealthData$Diagnosis)
# now let's reorder the entries and get the unique combinations
reordered_diagnosis <- order_string_splits(HealthData$Diagnosis, '; ')
# Recode nulls to NA
missing_diagnoses <- which(HealthData$Diagnosis == '')
HealthData$Diagnosis[missing_diagnoses] <- NA
HealthData$Diagnosis <- as.factor(reordered_diagnosis)
length(unique(HealthData$Diagnosis)) # 57 unique combinations after ordering
# convert AdmittedNote to string for manipulation and make lower case
HealthData$AdmittedNote <- as.character(HealthData$AdmittedNote)
HealthData$AdmittedNote <- tolower(HealthData$AdmittedNote)
HealthData$AdmittedNote <- trimws(HealthData$AdmittedNote, which = 'both')
HealthData$AdmittedNote <- gsub(' +', ' ', HealthData$AdmittedNote)
HealthData$AdmittedNote <- gsub('treatment: ', '', HealthData$AdmittedNote)
HealthData$AdmittedNote <- gsub(', ', '; ', HealthData$AdmittedNote)
HealthData$AdmittedNote <- gsub('tylenolg', 'tylenol', HealthData$AdmittedNote)
HealthData$AdmittedNote <- gsub(' and ', '; ', HealthData$AdmittedNote)
HealthData$AdmittedNote <- gsub(' & ', '; ', HealthData$AdmittedNote)
# reorder and get unique combinations
reordered_admitted_note <- order_string_splits(HealthData$AdmittedNote, '; ')
HealthData$AdmittedNote <- as.factor(reordered_admitted_note)
length(unique(HealthData$AdmittedNote)) # 661 unique combinations after ordering
# replace all 0 temperature readings with NA
HealthData$Temperature[which(HealthData$Temperature == 0)] <- NA
# reading of 41.3 for one runner is probably celsius; converting to 106.34 fahrenheit
HealthData$Temperature <- as.numeric(as.character(HealthData$Temperature))
HealthData$Temperature[which(HealthData$Temperature == 41.3)] <- 106.34
# investigate sodium levels - set 0 to NA
HealthData$Sodium.Level
# add year to the 2016 healthdata
HealthData$Year <- 2016
# update names on 2012-2015 data; remove X (index) column
names(HealthDataRecoded2012to2015)[names(HealthDataRecoded2012to2015) == 'gender'] <- 'Gender'
names(HealthDataRecoded2012to2015)[names(HealthDataRecoded2012to2015) == 'age'] <- 'Age'
names(HealthDataRecoded2012to2015)[names(HealthDataRecoded2012to2015) == 'year'] <- 'Year'
names(HealthDataRecoded2012to2015)[names(HealthDataRecoded2012to2015) == 'tempAvg'] <- 'Temperature'
names(HealthDataRecoded2012to2015)[names(HealthDataRecoded2012to2015) == 'Transfer.Name'] <- 'Transfer Name'
names(HealthDataRecoded2012to2015)[names(HealthDataRecoded2012to2015) == 'Hospital.Name'] <- 'Hospital Name'
HealthDataRecoded2012to2015$X <- NULL
# add columns that were collected in 2012-2015, but not in 2016
column_names <- setdiff(names(HealthDataRecoded2012to2015), names(HealthData))
HealthData[,column_names] <- NA
### Cleanup for old data
# Rename NA values to NOID
HealthDataRecoded2012to2015$BIB_ID <- as.character(HealthDataRecoded2012to2015$BIB_ID)
HealthDataRecoded2012to2015$BIB_ID[is.na(HealthDataRecoded2012to2015$BIB_ID)] <- 'NOID'
HealthDataRecoded2012to2015$BIB_ID <- as.factor(HealthDataRecoded2012to2015$BIB_ID)
# Aggregate ICU values
HealthDataRecoded2012to2015$Section[HealthDataRecoded2012to2015$Section == 'ICU-A'] <- 'ICU'
HealthDataRecoded2012to2015$Section[HealthDataRecoded2012to2015$Section == 'ICU-B'] <- 'ICU'
# Putting spaces around the '-' in pod
pod_indices_old <- grep("POD-", HealthDataRecoded2012to2015$Section)
HealthDataRecoded2012to2015$Section[pod_indices_old] <- gsub("POD-", "POD - ", HealthDataRecoded2012to2015$Section[pod_indices_old])
# Make Check out status consistent across years
cos_indices_old <- grep("Check out", HealthDataRecoded2012to2015$CheckOutStatus)
HealthDataRecoded2012to2015$CheckOutStatus[cos_indices_old] <- 'Check Out'
# Making diagnosis and chief complaints consistent
other_2015_diag_indices <- which(HealthDataRecoded2012to2015$Diagnosis == 'other ' & HealthDataRecoded2012to2015$Year == 2015)
HealthDataRecoded2012to2015$Diagnosis[other_2015_diag_indices] <- 'other'
other_2015_cc_indices <- which(HealthDataRecoded2012to2015$ChiefComplaints == 'other ' & HealthDataRecoded2012to2015$Year == 2015)
HealthDataRecoded2012to2015$ChiefComplaints[other_2015_cc_indices] <- 'other'
# Handling street addresses for 2016 data
street_indices <- which(HealthDataRecoded2012to2015$Year == 2015 & !is.na(HealthDataRecoded2012to2015$Street.Location.Description))
aid_station_street_addresses <- unique(HealthDataRecoded2012to2015[street_indices, c("Tent", "Street.Location.Description")])
aid_station_street_addresses$Street.Location.Description <- as.character(aid_station_street_addresses$Street.Location.Description)
aid_station_street_addresses$Tent <- as.character(aid_station_street_addresses$Tent)
HealthData$Tent <- as.character(HealthData$Tent)
HealthData$Street.Location.Description <- as.character(HealthData$Street.Location.Description)
HealthData <- merge(HealthData, aid_station_street_addresses, all.x = TRUE, by = 'Tent')
HealthData$Street.Location.Description.x <- HealthData$Street.Location.Description.y
HealthData$Street.Location.Description.y <- NULL
names(HealthData)[names(HealthData)=="Street.Location.Description.x"] <- "Street.Location.Description"
HealthData$Tent <- as.factor(HealthData$Tent)
HealthData$Street.Location.Description <- as.factor(HealthData$Street.Location.Description)
# integrating 2016 data to new dataframe
HealthDataRecoded2012to2016 <- rbind(HealthDataRecoded2012to2015, HealthData)
raw_2016 <- read.csv("/Volumes/marathon/NSF_Marathon_DataAnalytics/Craigs_XSpace/2016 Combined (no fast track).csv", header = TRUE)
HealthDataRecoded2012to2015 <- read.csv("/Volumes/marathon/NSF_Marathon_DataAnalytics/Craigs_XSpace/HealthDataRecoded2012to2015.csv")
HealthData <- raw_2016
raw_2016 <- read.csv("Z:\\NSF_Marathon_DataAnalytics\\Craigs_XSpace\\2016 Combined (no fast track).csv", header = TRUE)
HealthData <- raw_2016
# summary of the data frame
str(HealthData)
summary(HealthData)
# replace all missing data with NA
HealthData <- apply(HealthData, 2, function(x) gsub("^$|^ $", NA, x))
# re-convert HealthData to data frame
HealthData <- data.frame(HealthData)
# find the percentage of missing data prior to cleansing/aggregation
missingValuePercentage <- function(dataset) {
percentage <- sum(is.na(dataset))/(nrow(dataset)*ncol(dataset)) # this only works for a data frame, not vector
return(percentage)
}
missingValuePercentage(HealthData)
# rename BIB to BIB_ID
names(HealthData)[names(HealthData) == 'BIB'] <- 'BIB_ID'
# get the number of unique bib_id's
length(unique(HealthData$BIB_ID))
# converting levels from M / F to 1 / 0
levels(HealthData$Gender)[levels(HealthData$Gender) == 'M'] <- 1
levels(HealthData$Gender)[levels(HealthData$Gender) == 'F'] <- 0
# change check in and admitted times from factors to strings
HealthData$CheckIn <- as.character(HealthData$CheckIn)
HealthData$CheckOut <- as.character(HealthData$CheckOut)
HealthData$Admitted <- as.character(HealthData$Admitted)
?grep
grep('.* 00:.*', HealthData$Admitted)
grep('10-09-2016  00:47:00', HealthData$Admitted)
head(HealthData$Admitted)
grep('10/09/2016  00:47', HealthData$Admitted)
grep('10/09/2016  10:38', HealthData$Admitted)
grep("10/09/2016  10:38", HealthData$Admitted)
grep("10/09/2016  10:38", HealthData$Admitted)
grep("10/09/2016 10:38", HealthData$Admitted)
grep("10/9/2016 10:38", HealthData$Admitted)
grep(".* 10:38", HealthData$Admitted)
grep(".* 00:38", HealthData$Admitted)
grep(".* 12:38", HealthData$Admitted)
grep(".* 12:.*", HealthData$Admitted)
grep(".* 12:.*AM", HealthData$Admitted)
grep(".* 12:", HealthData$Admitted)
grep(".* 00:", HealthData$Admitted)
grep(".* 0:", HealthData$Admitted)
x <- list(a = 1:10, beta = exp(-3:3), logic = c(TRUE,FALSE,FALSE,TRUE))
x
x[[2]]
x[1][1]
x[1][2] <- 0
x[1][2] <- seq(10)
x[1][2]
x[1][2] <- seq(1, 10)
x[1][2]
x[1][2] <- seq(1, 20)
seq(1, 20)
x$a[2] <- seq(1, 10)
x$a
x$a[2] <- x[[1]]
x[[2]]
class(x$a)
class(x)
x$a[2] <- 1
x[1]
x <- list(a = matrix(1:20, ncol = 4), beta = exp(-3:3), logic = c(TRUE,FALSE,FALSE,TRUE))
x
x[[1]]
x[[1]][1,2]
x[[1]][2]
x[[1]][,2]
x[[1]][,2] <- 36:40
x[[1]]
lapply(x, mean)
?sample
sample(1:10, length.out = 100)
sample(rep(1:10), length.out = 100))
sample(rep(1:10), length.out = 100)
sample(rep(1:10, length.out = 100))
?rep
set.seed(2)
# Principal Components Analysis
states = row.names(USArrests)
states
names(USArrests)
# EDA
apply(USArrests, 2, mean)
apply(USArrests, 2, var)
# Perform PCA
pr.out <- prcomp(USArrests, scale. = TRUE)
names(pr.out)
# Used to scale prior to applying PCA
pr.out$center
pr.out$scale
# Loading vectors
pr.out$rotation
dim(pr.out$x)
biplot(pr.out, scale = 0)
# Rotate to get basically the same components
pr.out$rotation <- -pr.out$rotation
pr.out$x <- -pr.out$x
biplot(pr.out, scale = 0)
# Other info
pr.out$sdev
pr.var <- pr.out$sdev^2
pr.var
pve <- pr.var/sum(pr.var)
pve
# Scree plot
plot(pve, xlab = "Principal Component", ylab = "Proportion of Variance Explained",
ylim = c(0,1), type = 'b')
plot(cumsum(pve), xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained", ylim = c(0,1), type = 'b')
x <- matrix(rnorm(50*2), ncol=2)
x
?rnorm
x[1:25, 1] <- x[1:25, 1] + 3
x[1:25, 2] <- x[1:25, 2] - 4
x
km.out <- kmeans(x, 2, nstart = 20)
km.out$cluster
plot(x, col=(km.out$cluster + 1), main='K-Means Clustering Results with K=2',
xlab='', ylab='', pch=20, cex=2)
set.seed(4)
kmeans
?kmeans
km.out <- kmeans(x, 3, nstart=20)
km.out
plot(x, col=(km.out$cluster + 1), main='K-Means Clustering Results with K=3',
xlab='', ylab='', pch=20, cex=2)
set.seed(3)
km.out <- kmeans(x, 3, nstart=1)
km.out$tot.withinss
km.out <- kmeans(x, 3, nstart=20)
km.out$tot.withinss
?dist
?hclust
hc.complete <- hclust(dist(x), method = 'complete')
hc.average <- hclust(dist(x), method = 'average')
hc.single <- hclust(dist(x), method = 'single')
par(mfrow=c(1,3))
plot(hc.complete, main='Complete Linkage', xlab='', sub='', cex=.9)
plot(hc.average, main='Average Linkage', xlab='', sub='', cex=.9)
plot(hc.single, main='Single Linkage', xlab='', sub='', cex=.9)
par(mfrow=c(1,1))
cutree(hc.complete, 2)
cutree(hc.average, 2)
cutree(hc.single, 2)
cutree(hc.single, 4)
xsc = scale(x)
plot(hclust(dist(xsc), method='complete'), main='Hierarchical Clustering with Scaled Features')
x <- matrix(rnorm(30*3), ncol = 3)
dd <- as.dist(1 - cor(t(x)))
cor(t(x))
dd
plot(hclust(dd, method='complete'), main = 'Complete Linkage with Correlation-Based Distance',
xlab='', sub='')
library(ISLR)
nci.labs <- NCI60$labs
nci.data <- NCI60$data
nci.labs
head(nci.data)
head(nci.data)
nci.labs
dim(nci.data)
nrow(nci.data)
dim(nci.data)
nci.labs[1:4]
table(nci.labs)
pr.out <- prcomp(nci.data, scale = TRUE)
Cols <- function(vec) {
cols <- rainbow(length(unique(vec)))
return(cols[as.numeric(as.factor(vec))])
}
par(mfrow=c(1,2))
as.numeric(as.factor(nci.labs))
Cols(nci.labs)
plot(pr.out$x[,1:2], col=Cols(nci.labs), pch=19, xlab='Z1', ylab='Z2')
plot(pr.out$x[,c(1,3)], col=Cols(nci.labs), pch=19, xlab='Z1', ylab='Z3')
summary(pr.out)
plot(pr.out)
par(mfrow=c(1,1))
plot(pr.out)
pr.out$sdev
pr.out$sdev**2
pr.out$sdev^2
?rainbow
pve <- 100*pr.out$sdev^2/sum(pr.out$sdev^2)
par(mfrow=c(1,2))
plot(pve, type='o', ylab='PVE', xlab='Principal Component', col='blue')
plot(cumsum(pve), type='o', ylab='Cumulative PVE', xlab='Principal Component', col='brown3')
par(mfrow=c(1,1))
summary(pr.out)
summary(pr.out)$importance[2,]
summary(pr.out)$importance[3,]
sd.data <- scale(nci.data)
par(mfrow=c(1,3))
data.dist <- dist(sd.data)
plot(hclust(data.dist), labels=nci.labs, main='Complete Linkage', xlab='', sub='', ylab='')
plot(hclust(data.dist, method='average'), labels=nci.labs, main='Average Linkage',
xlab='', sub='', ylab='')
plot(hclust(data.dist, method='single'), labels=nci.labs, main='Single Linkage',
xlab='', sub='', ylab='')
par(mfrow=c(1,1))
par(mfrow=c(3,1))
data.dist <- dist(sd.data)
plot(hclust(data.dist), labels=nci.labs, main='Complete Linkage', xlab='', sub='', ylab='')
plot(hclust(data.dist, method='average'), labels=nci.labs, main='Average Linkage',
xlab='', sub='', ylab='')
plot(hclust(data.dist, method='single'), labels=nci.labs, main='Single Linkage',
xlab='', sub='', ylab='')
par(mfrow=c(1,1))
par(mfrow=c(1,3))
data.dist <- dist(sd.data)
plot(hclust(data.dist), labels=nci.labs, main='Complete Linkage', xlab='', sub='', ylab='')
plot(hclust(data.dist, method='average'), labels=nci.labs, main='Average Linkage',
xlab='', sub='', ylab='')
plot(hclust(data.dist, method='single'), labels=nci.labs, main='Single Linkage',
xlab='', sub='', ylab='')
par(mfrow=c(1,1))
hc.out <- hclust(dist(sd.data))
hc.clusters <- cutree(hc.out, 4)
table(hc.clusters, nci.labs)
plot(hc.out, labels = nci.labs)
abline(h=139, col='red')
hc.out
set.seed(2)
km.out <- kmeans(sd.data, 4, nstart = 20)
km.clusters <- km.out$cluster
table(km.clusters, hc.clusters)
hc.out <- hclust(dist(pr.out$x[,1:5]))
plot(hc.out, labels=nci.labs, main='Hier. Clust. on First Five Score Vectors')
table(cutree(hc.out, 4), nci.labs)
install.packages('RServe')
install.packages('Rserve')
install.packages()
install.packages('archetypeanalysis')
install.packages('archetypes')
library(archetypes)
archetypes.predict
?archetypes.predict
?predict
?predict.archetypes
?summary.stepArchetypes
?predict.steparchetypes
?predict.stepArchetypes
movie_data <- read.csv("network_data.csv", header = TRUE)
head(movie_data)
# Get nodes for the graph
nrow(movie_data)
length(unique(movie_data$director_name))
length(unique(movie_data$actor_name))
dir_nodes <- cbind(as.character(movie_data$director_name), movie_data$director_facebook_likes)
actor_nodes <- cbind(as.character(movie_data$actor_name), movie_data$actor_facbook_likes)
nodes <- rbind(dir_nodes, actor_nodes)
nodes <- unique(nodes)
nrow(nodes)
nodes_df <- data.frame(id=nodes[,1], likes=nodes[,2])
write.csv(nodes_df, "person.csv", row.names = FALSE)
# Get links for the graph
links_df <- data.frame(source=as.character(movie_data$director_name), target=as.character(movie_data$actor_name))
x <- data.frame(table(links_df$source, links_df$target))
setwd("C:/Users/deepf/Google Drive - NU/Courses/Spring Quarter 2017/411 - Data Viz/Project/Network Diagram")
movie_data <- read.csv("network_data.csv", header = TRUE)
head(movie_data)
# Get nodes for the graph
nrow(movie_data)
length(unique(movie_data$director_name))
length(unique(movie_data$actor_name))
dir_nodes <- cbind(as.character(movie_data$director_name), movie_data$director_facebook_likes)
actor_nodes <- cbind(as.character(movie_data$actor_name), movie_data$actor_facbook_likes)
nodes <- rbind(dir_nodes, actor_nodes)
nodes <- unique(nodes)
nrow(nodes)
nodes_df <- data.frame(id=nodes[,1], likes=nodes[,2])
write.csv(nodes_df, "person.csv", row.names = FALSE)
# Get links for the graph
links_df <- data.frame(source=as.character(movie_data$director_name), target=as.character(movie_data$actor_name))
x <- data.frame(table(links_df$source, links_df$target))
nrow(x)
x <- data.frame(table(links_df$source))
nrow(x)
x
?paste
x <- data.frame(table(paste(links_df$source, links_df$target, sep=" "))
)
nrow(x)
head(x)
unique(movie_data$content_rating)
which(movie_data$content_rating == 'TV')
which(movie_data$content_rating == 'TV-PG')
?greps
?grepl
which(grepl('TV.*', movie_data$content_rating))
length(which(grepl('TV.*', movie_data$content_rating)))
unique(movie_data$content_rating)
length(which(movie_data$director_name = ''))
length(which(movie_data$director_name == ''))
unique(movie_data$content_rating[which(movie_data$director_name == '')])
head(movie_data[which(movie_data$director_name == '' && movie_data$content_rating == '')])
head(movie_data[which(movie_data$director_name == '' && movie_data$content_rating == ''),])
head(movie_data[which(movie_data$director_name == '' | movie_data$content_rating == ''),])
head(movie_data[which(movie_data$director_name == '' | movie_data$content_rating == ''), c(1:5)])
head(movie_data[which(movie_data$director_name == '' & movie_data$content_rating == ''), c(1:5)])
head(movie_data[which(movie_data$director_name == '' & movie_data$content_rating == ''), ])
length(is.na(movie_data$director_name))
length(is.na(movie_data$director_name) == TRUE)
length(which(is.na(movie_data$director_name)))
movie_data <- movie_data[-which(movie_data$director_name == ''),]
nrow(movie_data)
movie_data <- read.csv("network_data.csv", header = TRUE)
head(movie_data)
# Remove TV data
movie_data <- movie_data[-which(movie_data$director_name == ''),]
# Get nodes for the graph
nrow(movie_data)
length(unique(movie_data$director_name))
length(unique(movie_data$actor_name))
dir_nodes <- cbind(as.character(movie_data$director_name), movie_data$director_facebook_likes)
actor_nodes <- cbind(as.character(movie_data$actor_name), movie_data$actor_facbook_likes)
nodes <- rbind(dir_nodes, actor_nodes)
nodes <- unique(nodes)
nrow(nodes)
nodes_df <- data.frame(id=nodes[,1], likes=nodes[,2])
write.csv(nodes_df, "person.csv", row.names = FALSE)
links_df <- data.frame(source=as.character(movie_data$director_name), target=as.character(movie_data$actor_name))
x <- data.frame(table(paste(links_df$source, links_df$target, sep=" ")))
head(x)
tail(x)
View(x)
movie_data$dir_actor <- paste(movie_data$director_name, movie_data$actor_name, sep = " ")
